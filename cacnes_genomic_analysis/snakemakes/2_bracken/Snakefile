#########################
# SNAKEFILE FOR BRACKEN #
#########################

# Reminders:
# # Put your own email address in cluster.slurm.json so that you get emails about failures. No one else wants your slurm emails.

# Notes:
# # 6 samples do not have enough reads to be analyzed by kraken/bracken; snakemake will not go onto final matlab analysis step automatically due to these missing files; ran manually:
# # # module add mit/matlab/2018a; 
# # # matlab
# # # path('/scratch/mit_lieberman/projects/aro_cacnes_biogeo/2_bracken/scripts/',path); 
# # # analysis_bracken_main


''' VARIABLES '''

# csv file listing all samples names
spls = "samples.csv"

import sys
SCRIPTS_DIRECTORY = "/scratch/mit_lieberman/projects/aro_cacnes_biogeo/lab_scripts"
sys.path.insert(0, SCRIPTS_DIRECTORY)

from read_move_link_samplesCSV import *

# where to find processed raw data
DIR_PROCESSED_DATA = "/scratch/mit_lieberman/projects/aro_cacnes_biogeo/1_process_raw_data/"

# where to find matlab analysis scripts
SCRIPTS_DIRECTORY_MAT = "/scratch/mit_lieberman/projects/aro_cacnes_biogeo/2_bracken/scripts/"



''' PRE-SNAKEMAKE '''

## define couple of lists from samples.csv
## Format: Path,Sample,ReferenceGenome,ProviderName,Subject
[PATH_ls, SAMPLE_ls, REF_Genome_ls, PROVIDER_ls, CLADEID_ls] = read_samplesCSV(spls)
CLADES_ls = set(CLADEID_ls) # set(list_patient) provides only unique clade IDs
## Write sample_info.csv for each sample
split_samplesCSV(PATH_ls,SAMPLE_ls,REF_Genome_ls,PROVIDER_ls,CLADEID_ls)



''' SNAKEMAKE '''

rule all:
	input:
		# # Through kraken # #
		expand("2-kraken2/{sampleID}_krakenRep.txt",sampleID=SAMPLE_ls),
		expand("0-tmp/{sampleID}_krakSeq.txt",sampleID=SAMPLE_ls),
		# # Through bracken # #
		expand("2-kraken2/{sampleID}.bracken",sampleID=SAMPLE_ls),
		# # Through matlab analysis # # 
		"3-matlab/data_bracken_all.mat",
		"3-matlab/data_bracken_cacnes.mat",
		"3-matlab/data_bracken_cgran.mat",
		"3-matlab/samples_cgran.csv",
		# # Through clean up step # # 
		# "logs/DONE_cleanUp.txt",



rule headFQ2FA:
	input:
		fq1 = DIR_PROCESSED_DATA+"2-sickle2050/{sampleID}_filt1.fq.gz",
		fq2 = DIR_PROCESSED_DATA+"2-sickle2050/{sampleID}_filt2.fq.gz",
	output:
		fa1o="0-tmp/{sampleID}_1.fa",
		# fa2o="0-tmp/{sampleID}_2.fa",
		fq1o="0-tmp/{sampleID}_1.fq", # fq output later necessary for spades
		# fq2o="0-tmp/{sampleID}_2.fq",
	shell:
		"set +o pipefail; " # necessary to prevent pipefail (zcat runs but head is done)
		" zcat {input.fq1} | head -n 1000000 | tee {output.fq1o} | ../lab_scripts/fq2fa_sed.sh /dev/stdin > {output.fa1o} ;"
		# " zcat {input.fq2} | head -n 1000000 | tee {output.fq2o} | ../lab_scripts/fq2fa_sed.sh /dev/stdin > {output.fa2o} "


rule kraken2:
	input:
		rules.headFQ2FA.output.fa1o, # assessment based only on fwd 
	output:
		report="2-kraken2/{sampleID}_krakenRep.txt",
		seq_results="0-tmp/{sampleID}_krakSeq.txt",
	shell:
		" module add c3ddb/samtools/1.5 ; " # for bgzip
		" module add c3ddb/kraken/2.0.7 ; "
		" module add gcc/6.3.0;"
		" kraken2 --threads 4 "
		" --db /scratch/mit_lieberman/tools/databases/kraken2 {input} "
		" --report {output.report} |bgzip > {output.seq_results} "


rule bracken2:
	input:
		report=rules.kraken2.output.report,
	output:
		bracken_rep="2-kraken2/{sampleID}.bracken",
	conda:
		"envs/bracken2.yml",
	shell:
		" module add c3ddb/samtools/1.5 ; " # for bgzip
		" module add gcc/6.3.0;"
		" bracken -d /scratch/mit_lieberman/tools/databases/kraken2 -i {input.report} -o {output.bracken_rep} "


rule matlab_analysis:
	input:
		bracken_rep = expand("2-kraken2/{sampleID}.bracken",sampleID=SAMPLE_ls),
	output:
		mat_out_all="3-matlab/data_bracken_all.mat",
		mat_out_cacnes="3-matlab/data_bracken_cacnes.mat",
		mat_out_cgran="3-matlab/data_bracken_cgran.mat",
		mat_out_cgrancsv="3-matlab/samples_cgran.csv",
	shell:
		"""
		module add mit/matlab/2018a; 
		matlab -r "path('{SCRIPTS_DIRECTORY_MAT}',path); analysis_bracken_main"
		"""


rule cleanUp:
	input:
		expand("2-kraken2/{sampleID}.bracken",sampleID=SAMPLE_ls),
		mat_out_cgrancsv="3-matlab/samples_cgran.csv",
	params:
		tmp_folder="0-tmp/",
	output:
		"logs/DONE_cleanUp.txt",
	shell:
		" rm -r {params.tmp_folder} ;"
		" touch {output} ;"

