#########################################
# LIEBERMAN LAB SNAKEFILE FOR CASE STEP #
#########################################

# Reminders:
# # Put your own email address in cluster.slurm.json so that you get emails about failures, not me!



''' VARIABLES '''

# csv file listing all samples names and locations of data
spls = "samples_case.csv"

import sys, subprocess
SCRIPTS_DIRECTORY = "/scratch/mit_lieberman/projects/aro_cacnes_biogeo/lab_scripts"
sys.path.insert(0, SCRIPTS_DIRECTORY)

from read_samplesCSV import read_samples_caseCSV

# purity threshold (from mapping quality) for including position
maxFQ = -30 

# where to find reference genome
DIR_REFERENCE_GENOMES = "/scratch/mit_lieberman/projects/aro_cacnes_biogeo/reference_genomes/"



''' PRE-SNAKEMAKE '''

## define couple of lists from samples_case.csv
## FORMAT: Path,Sample,ReferenceGenome,Outgroup
# NOTE: case analysis expects:
#	- only a single ref genome used for all samples
#	- unique sample IDs
#	- Col1==Paths, points to the snakemake directory used for mapping, not raw data! > only single entries accepted!
[PATH_ls, SAMPLE_ls, REF_Genome_ls, OUTGROUP_ls] = read_samples_caseCSV(spls)



''' SNAKEMAKE '''

rule all:
	input:
		# # Data links only # #
		expand("data/vcf/{sampleID}_ref_{references}_outgroup{outgroup}.vcf.gz",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
		expand("data/qual/{sampleID}_ref_{references}_outgroup{outgroup}.quals.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
		expand("data/diversity/{sampleID}_ref_{references}_outgroup{outgroup}.diversity.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
		# # Strings # # 
		"1-temp_pos/string_diversity_mat.txt",
		"1-temp_pos/string_qual_mat.txt",
		"1-temp_pos/string_sampleID_names.txt",
		"1-temp_pos/string_outgroup_bool.txt",
		# # Everything # #
		"2-candidate_mutation_table/candidate_mutation_table.mat",
		# # Including cleanup step # #
		# "logs/DONE_cleanUp",


rule build_data_links:
	output:
		vcf_links = expand("data/vcf/{sampleID}_ref_{references}_outgroup{outgroup}.vcf.gz",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
		qual_mat_links = expand("data/qual/{sampleID}_ref_{references}_outgroup{outgroup}.quals.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
		div_mat_links = expand("data/diversity/{sampleID}_ref_{references}_outgroup{outgroup}.diversity.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
	log:
		"logs/build_links.log"
	run:
		import subprocess
		subprocess.run( "rm -fr data/ " ,shell=True) # clean it up prior run
		subprocess.run( "mkdir -p data/vcf/ data/qual/ data/diversity/ " ,shell=True)
		for i in range(len(SAMPLE_ls)):
			subprocess.run( "ln -fs -T " + PATH_ls[i] + "/6-diversity/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "*diversity.mat data/diversity/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "_outgroup" + OUTGROUP_ls[i] + ".diversity.mat" ,shell=True)
			subprocess.run( "ln -fs -T " + PATH_ls[i] + "/5-quals/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "*quals.mat data/qual/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "_outgroup" + OUTGROUP_ls[i] + ".quals.mat" ,shell=True)
			subprocess.run( "ln -fs -T " + PATH_ls[i] + "/4-vcf/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "*variant.vcf.gz data/vcf/" + SAMPLE_ls[i] + "_ref_" + REF_Genome_ls[i] + "_outgroup" + OUTGROUP_ls[i] + ".vcf.gz " ,shell=True)
			

rule variants2positions:
	input:
		variants = "data/vcf/{sampleID}_ref_{references}_outgroup{outgroup}.vcf.gz",
	params:
		ref = DIR_REFERENCE_GENOMES+"{references}/",
		outgroup_tag = "{outgroup}", # boolean (0==ingroup or 1==outgroup)
	output:
		mat_positions = "1-temp_pos/{sampleID}_ref_{references}_outgroup{outgroup}_positions.mat",
	shell:
		"""
		module add mit/matlab/2015b; 
		matlab -r "path('{SCRIPTS_DIRECTORY}',path); generate_positions_single_sample_snakemake( '{input.variants}', '{output.mat_positions}', {maxFQ}, '{params.ref}', {params.outgroup_tag}  ) " 
		"""


rule combine_positions:
	input:
		mat_positions = expand("1-temp_pos/{sampleID}_ref_{references}_outgroup{outgroup}_positions.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls)
	params:
		file_other_p_to_consider = "add_positions/other_positions.mat",
		ref = expand(DIR_REFERENCE_GENOMES+"{references}/",references=set(REF_Genome_ls)),
	output:
		string_input_p_positions = "1-temp_pos/string_file_other_p_to_consider.txt",
		mat_positions = "1-temp_pos/allpositions.mat",
	shell:
		"""
		module add mit/matlab/2015b; 
		echo {input.mat_positions} > {output.string_input_p_positions}
		matlab -r "path('{SCRIPTS_DIRECTORY}',path); combine_positions_snakemake( '{output.string_input_p_positions}', '{params.file_other_p_to_consider}', '{output.mat_positions}', '{params.ref}', {maxFQ} )" 
		"""


# build input for candidate_mutation_table
rule string_diversity_mat:
	input:
		diversity_mat = expand("data/diversity/{sampleID}_ref_{references}_outgroup{outgroup}.diversity.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
	output:
		string_diversity_mat = "1-temp_pos/string_diversity_mat.txt",
	run:
		with open( output.string_diversity_mat ,"w") as f: 
			print(*input.diversity_mat, sep=" ", file=f)


# build input for candidate_mutation_table
rule string_quals_mat:
	input:
		quals_mat = expand("data/qual/{sampleID}_ref_{references}_outgroup{outgroup}.quals.mat",zip,sampleID=SAMPLE_ls, references=REF_Genome_ls, outgroup=OUTGROUP_ls),
	output:
		string_qual_mat = "1-temp_pos/string_qual_mat.txt",
	shell:
		"""
		for i in {input.quals_mat}; do
		 echo $i
		done |tr '\n' ' ' |sed "s/ $//" > {output.string_qual_mat};
		"""


# build input for candidate_mutation_table
rule string_sampleID_names:
	input: 
		"logs/build_links.log",
	params:
		sampleID_names = expand( "{sampleID}" , sampleID=SAMPLE_ls ),
	output:
		string_sampleID_names = "1-temp_pos/string_sampleID_names.txt",
	shell:
		"""
		for i in {params.sampleID_names}; do
		 echo $i
		done |tr '\n' ' ' |sed "s/ $//" > {output.string_sampleID_names};
		"""


# build input for candidate_mutation_table
rule string_outgroup_bool:
	input: 
		"logs/build_links.log",
	params:
		outgroup_bool = expand( "{outgroup}" , outgroup=OUTGROUP_ls ),
	output:
		string_outgroup_bool = "1-temp_pos/string_outgroup_bool.txt",
	shell:
		"""
		for i in {params.outgroup_bool}; do
		 echo $i
		done |tr '\n' ' ' |sed "s/ $//" > {output.string_outgroup_bool};
		"""


rule candidate_mutation_table:
	input:
		mat_positions = rules.combine_positions.output.mat_positions, # "1-temp_pos/allpositions.mat",
		string_diversity_mat = rules.string_diversity_mat.output.string_diversity_mat, # "1-temp_pos/string_diversity_mat.txt",
		string_qual_mat = rules.string_quals_mat.output.string_qual_mat, # "1-temp_pos/string_qual_mat.txt",
		string_sampleID_names = rules.string_sampleID_names.output.string_sampleID_names, # "1-temp_pos/string_sampleID_names.txt",
		string_outgroup_bool = rules.string_outgroup_bool.output.string_outgroup_bool, # "1-temp_pos/string_outgroup_bool.txt",
	output:
		candidate_mutation_table = "2-candidate_mutation_table/candidate_mutation_table.mat",
	shell:
		"""
		module add mit/matlab/2015b; 
		matlab -r "path('{SCRIPTS_DIRECTORY}',path); make_candidate_mutation_table_snakemake_indels( '{input.mat_positions}', '{input.string_sampleID_names}', '{input.string_outgroup_bool}', '{input.string_qual_mat}', '{input.string_diversity_mat}', '{output.candidate_mutation_table}' )" 
		"""


rule cleanUp:
	input:
		candidate_mutation_table = "2-candidate_mutation_table/candidate_mutation_table.mat",
	params:
		temp_folder = "1-temp_pos"
	output:
		"logs/DONE_cleanUp"
	shell:
		" rm -rf {params.temp_folder} ; touch {output} "


